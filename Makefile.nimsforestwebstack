# ============================================================================
# nimsforestwebstack - Universal Web Stack Makefile
# ============================================================================
# This Makefile provides commands for the complete web stack:
# Hugo + Next.js + Go API + Zitadel Auth + Nginx + Docker
# ============================================================================

# Project configuration - override in your main Makefile
PROJECT_NAME ?= my-web-project
DOMAIN ?= localhost

# Detect if we're in the webstack directory or included from parent
WEBSTACK_DIR := $(dir $(lastword $(MAKEFILE_LIST)))
ifeq ($(WEBSTACK_DIR),.)
  # We're in the webstack directory
  HUGO_DIR ?= hugo-site
  NEXTJS_STATIC_DIR ?= nextjs-tools
  NEXTJS_SSR_DIR ?= nextjs-app
  API_DIR ?= api
  AUTH_DIR ?= auth
  INFRA_DIR ?= infrastructure
else
  # We're included from parent directory
  HUGO_DIR ?= $(WEBSTACK_DIR)hugo-site
  NEXTJS_STATIC_DIR ?= $(WEBSTACK_DIR)nextjs-tools
  NEXTJS_SSR_DIR ?= $(WEBSTACK_DIR)nextjs-app
  API_DIR ?= $(WEBSTACK_DIR)api
  AUTH_DIR ?= $(WEBSTACK_DIR)auth
  INFRA_DIR ?= $(WEBSTACK_DIR)infrastructure
endif

# Include the deployment commands from Hydra
include $(shell find . -name "Makefile.deployment" | head -1)

# ============================================================================
# Help
# ============================================================================
.PHONY: help
help:
	@echo "🌲 $(PROJECT_NAME) - nimsforestwebstack"
	@echo "====================================="
	@echo ""
	@echo "🚀 Quick Start:"
	@echo "  make setup              - Initialize development environment"
	@echo "  make dev                - Start all services"
	@echo "  make deploy             - Deploy to production"
	@echo ""
	@echo "🏗️ Development:"
	@echo "  make dev-hugo           - Start Hugo development server"
	@echo "  make dev-nextjs-static  - Start Next.js static tools"
	@echo "  make dev-nextjs-ssr     - Start Next.js SSR app"
	@echo "  make dev-api            - Start Go API gateway"
	@echo "  make dev-auth           - Start Zitadel authentication"
	@echo ""
	@echo "🔧 Setup:"
	@echo "  make setup-docker       - Setup Docker environment"
	@echo "  make setup-deps         - Install all dependencies"
	@echo "  make setup-env          - Setup environment files"
	@echo ""
	@echo "🧪 Testing:"
	@echo "  make test-all           - Run all tests"
	@echo "  make test-hugo          - Test Hugo site"
	@echo "  make test-nextjs        - Test Next.js applications"
	@echo "  make test-api           - Test API gateway"
	@echo ""
	@echo "🚀 Deployment:"
	@echo "  make deployment-help    - Show deployment-specific commands"
	@echo "  make build-all          - Build all components"
	@echo "  make deploy-all         - Deploy complete stack"
	@echo ""
	@echo "🔧 Configuration:"
	@echo "  PROJECT_NAME = $(PROJECT_NAME)"
	@echo "  DOMAIN = $(DOMAIN)"
	@echo ""

# ============================================================================
# Development Environment Setup
# ============================================================================
.PHONY: setup setup-docker setup-deps setup-env

setup: setup-docker setup-deps setup-env
	@echo "✅ Development environment ready!"

setup-docker:
	@echo "🐳 Setting up Docker environment..."
	@docker network create webstack-net 2>/dev/null || true
	@docker volume create webstack-postgres 2>/dev/null || true

setup-deps:
	@echo "📦 Installing dependencies..."
	@if [ -d "$(HUGO_DIR)" ]; then \
		echo "Installing Hugo modules..."; \
		cd $(HUGO_DIR) && hugo mod get -u; \
		cd $(HUGO_DIR) && hugo mod tidy; \
	fi
	@if [ -d "$(NEXTJS_STATIC_DIR)" ]; then \
		echo "Installing Next.js static tools dependencies..."; \
		cd $(NEXTJS_STATIC_DIR) && npm install; \
	fi
	@if [ -d "$(NEXTJS_SSR_DIR)" ]; then \
		echo "Installing Next.js SSR app dependencies..."; \
		cd $(NEXTJS_SSR_DIR) && npm install; \
	fi
	@if [ -d "$(API_DIR)" ]; then \
		echo "Installing Go API dependencies..."; \
		cd $(API_DIR) && go mod tidy && go mod download; \
	fi

setup-env:
	@echo "⚙️ Setting up environment files..."
	@if [ ! -f .env ]; then \
		echo "Creating .env file..."; \
		echo "# Generated by nimsforestwebstack" > .env; \
		echo "PROJECT_NAME=$(PROJECT_NAME)" >> .env; \
		echo "DOMAIN=$(DOMAIN)" >> .env; \
		echo "POSTGRES_DB=webstack" >> .env; \
		echo "POSTGRES_USER=webstack" >> .env; \
		echo "POSTGRES_PASSWORD=webstack_dev_password" >> .env; \
		echo "ZITADEL_DATABASE_POSTGRES_HOST=postgres" >> .env; \
		echo "ZITADEL_EXTERNALSECURE=false" >> .env; \
		echo "ZITADEL_TLS_ENABLED=false" >> .env; \
		echo "API_PORT=8080" >> .env; \
		echo "HUGO_PORT=1313" >> .env; \
		echo "NEXTJS_STATIC_PORT=3001" >> .env; \
		echo "NEXTJS_SSR_PORT=3000" >> .env; \
	fi

# ============================================================================
# Development Commands
# ============================================================================
.PHONY: dev dev-hugo dev-nextjs-static dev-nextjs-ssr dev-api dev-auth

dev:
	@echo "🚀 Starting complete development environment..."
	@echo "🌐 Services will be available at:"
	@echo "   Main site: http://$(DOMAIN)"
	@echo "   Hugo: http://$(DOMAIN):1313"
	@echo "   Next.js Tools: http://$(DOMAIN):3001"
	@echo "   Next.js App: http://$(DOMAIN):3000"
	@echo "   API: http://$(DOMAIN):8080"
	@echo "   Auth: http://$(DOMAIN):8081"
	@docker compose -f webstack/docker-compose.dev.yml up --build

dev-hugo:
	@echo "📝 Starting Hugo development server..."
	@if [ -d "$(HUGO_DIR)" ]; then \
		cd $(HUGO_DIR) && hugo server --buildDrafts --navigateToChanged --bind 0.0.0.0 --port 1313; \
	else \
		echo "❌ Hugo directory not found: $(HUGO_DIR)"; \
	fi

dev-nextjs-static:
	@echo "⚛️ Starting Next.js static tools..."
	@if [ -d "$(NEXTJS_STATIC_DIR)" ]; then \
		cd $(NEXTJS_STATIC_DIR) && npm run dev -- --port 3001; \
	else \
		echo "❌ Next.js static directory not found: $(NEXTJS_STATIC_DIR)"; \
	fi

dev-nextjs-ssr:
	@echo "🌐 Starting Next.js SSR app..."
	@if [ -d "$(NEXTJS_SSR_DIR)" ]; then \
		cd $(NEXTJS_SSR_DIR) && npm run dev -- --port 3000; \
	else \
		echo "❌ Next.js SSR directory not found: $(NEXTJS_SSR_DIR)"; \
	fi

dev-api:
	@echo "🔌 Starting API gateway..."
	@if [ -d "$(API_DIR)" ]; then \
		cd $(API_DIR) && go run . --port 8080; \
	else \
		echo "❌ API directory not found: $(API_DIR)"; \
	fi

dev-auth:
	@echo "🔐 Starting authentication services..."
	@docker compose -f webstack/docker-compose.dev.yml up postgres zitadel

# ============================================================================
# Build Commands
# ============================================================================
.PHONY: build-all build-hugo build-nextjs build-api

build-all: build-hugo build-nextjs build-api
	@echo "✅ All components built successfully!"

build-hugo:
	@echo "🔨 Building Hugo site..."
	@if [ -d "$(HUGO_DIR)" ]; then \
		cd $(HUGO_DIR) && hugo --minify --destination=../dist/hugo; \
	fi

build-nextjs:
	@echo "🔨 Building Next.js applications..."
	@if [ -d "$(NEXTJS_STATIC_DIR)" ]; then \
		echo "Building Next.js static tools..."; \
		cd $(NEXTJS_STATIC_DIR) && npm run build && npm run export; \
		cp -r out/* ../dist/nextjs-static/ 2>/dev/null || true; \
	fi
	@if [ -d "$(NEXTJS_SSR_DIR)" ]; then \
		echo "Building Next.js SSR app..."; \
		cd $(NEXTJS_SSR_DIR) && npm run build; \
	fi

build-api:
	@echo "🔨 Building API gateway..."
	@if [ -d "$(API_DIR)" ]; then \
		cd $(API_DIR) && go build -o ../dist/api-gateway .; \
	fi

# ============================================================================
# Testing Commands
# ============================================================================
.PHONY: test-all test-hugo test-nextjs test-api

test-all: test-hugo test-nextjs test-api
	@echo "✅ All tests completed!"

test-hugo:
	@echo "🧪 Testing Hugo site..."
	@if [ -d "$(HUGO_DIR)" ]; then \
		cd $(HUGO_DIR) && hugo --buildDrafts --destination=/tmp/hugo-test; \
		echo "✅ Hugo site builds successfully"; \
	fi

test-nextjs:
	@echo "🧪 Testing Next.js applications..."
	@if [ -d "$(NEXTJS_STATIC_DIR)" ]; then \
		echo "Testing Next.js static tools..."; \
		cd $(NEXTJS_STATIC_DIR) && npm run lint && npm run type-check; \
	fi
	@if [ -d "$(NEXTJS_SSR_DIR)" ]; then \
		echo "Testing Next.js SSR app..."; \
		cd $(NEXTJS_SSR_DIR) && npm run lint && npm run type-check; \
	fi

test-api:
	@echo "🧪 Testing API gateway..."
	@if [ -d "$(API_DIR)" ]; then \
		cd $(API_DIR) && go test ./...; \
	fi

# ============================================================================
# Clean Commands
# ============================================================================
.PHONY: clean clean-deps clean-docker

clean:
	@echo "🧹 Cleaning build artifacts..."
	@rm -rf dist/
	@if [ -d "$(HUGO_DIR)" ]; then rm -rf $(HUGO_DIR)/public; fi
	@if [ -d "$(NEXTJS_STATIC_DIR)" ]; then rm -rf $(NEXTJS_STATIC_DIR)/.next $(NEXTJS_STATIC_DIR)/out; fi
	@if [ -d "$(NEXTJS_SSR_DIR)" ]; then rm -rf $(NEXTJS_SSR_DIR)/.next; fi
	@if [ -d "$(API_DIR)" ]; then rm -f $(API_DIR)/api-gateway; fi

clean-deps:
	@echo "🧹 Cleaning dependencies..."
	@if [ -d "$(NEXTJS_STATIC_DIR)" ]; then rm -rf $(NEXTJS_STATIC_DIR)/node_modules; fi
	@if [ -d "$(NEXTJS_SSR_DIR)" ]; then rm -rf $(NEXTJS_SSR_DIR)/node_modules; fi

clean-docker:
	@echo "🧹 Cleaning Docker resources..."
	@docker compose -f webstack/docker-compose.dev.yml down -v
	@docker system prune -f

# ============================================================================
# Deployment Commands
# ============================================================================
.PHONY: deploy-all

deploy-all:
	@echo "🚀 Deploying complete web stack..."
	@$(MAKE) build-all
	@$(MAKE) deploy-website
	@echo "✅ Deployment complete!"

# ============================================================================
# Project Generator Commands  
# ============================================================================
.PHONY: generate-project install-nimsforestwebstack

install-nimsforestwebstack:
	@echo "📦 Installing nimsforestwebstack CLI..."
	@if [ -d "tools/nimsforestwebstack" ]; then \
		cd tools/nimsforestwebstack && go install ./cmd/nimsforestwebstack; \
	else \
		go install github.com/nimsforest/nimsforestwebstack/cmd/nimsforestwebstack@latest; \
	fi

generate-project: install-nimsforestwebstack
	@echo "🚀 Generate a new project using nimsforestwebstack..."
	@nimsforestwebstack --interactive